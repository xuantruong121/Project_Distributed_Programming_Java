plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group 'iuh.fit.qlksfxapp'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

sourceCompatibility = '21'
targetCompatibility = '21'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

application {
    mainClass = 'iuh.fit.qlksfxapp.Main'
}

javafx {
    version = '23.0.1'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing']
}

dependencies {
    implementation 'org.controlsfx:controlsfx:11.2.1'
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude group: 'org.openjfx'
    }
    implementation('net.synedra:validatorfx:0.5.0') {
        exclude group: 'org.openjfx'
    }
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'
    implementation('eu.hansolo:tilesfx:21.0.3') {
        exclude group: 'org.openjfx'
    }

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    // Jakarta EE and Hibernate 6.x dependencies
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.hibernate.orm:hibernate-core:6.4.1.Final'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation 'org.hibernate.common:hibernate-commons-annotations:6.0.6.Final'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.4'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'jakarta.transaction:jakarta.transaction-api:2.0.1'

    // Database
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.4.1'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'org.slf4j:slf4j-simple:2.0.9'

    // Utilities
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'net.datafaker:datafaker:2.4.2'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    testCompileOnly 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
}

test {
    useJUnitPlatform()
}

task runRMIServer(type: JavaExec) {
    group = "application"
    description = "Run RMI Server"
    mainClass = "iuh.fit.qlksfxapp.RMI.RMIServer"
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ["-Djava.security.policy=${projectDir}/rmi.policy", "-Djava.rmi.server.hostname=localhost"]
}

task runRMIClient(type: JavaExec) {
    group = "application"
    description = "Run RMI Client Menu"
    mainClass = "iuh.fit.qlksfxapp.RMI.RMIClientMenu"
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ["-Djava.security.policy=${projectDir}/rmi.policy"]
    standardInput = System.in
}

task cleanAndRun(type: GradleBuild) {
    group = "application"
    description = "Clean build and run the application"
    tasks = ['clean', 'run']
}

